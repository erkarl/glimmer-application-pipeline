import Filter from 'broccoli-persistent-filter';
import { precompile } from '@glimmer/compiler';
class GlimmerTemplatePrecompiler extends Filter {
    constructor(inputNode, options) {
        super(...arguments);
        this.extensions = ['hbs'];
        this.targetExtension = 'js';
        this.options = options || {};
    }
    processString(content, relativePath) {
        let specifier = getTemplateSpecifier(this.options.rootName, relativePath);
        return 'export default ' + precompile(content, { meta: { specifier, '<template-meta>': true } }) + ';';
    }
}
function getTemplateSpecifier(rootName, relativePath) {
    let path = relativePath.split('/');
    let prefix = path.shift();
    // TODO - should use module map config to be rigorous
    if (path[path.length - 1] === 'template.hbs') {
        path.pop();
    }
    if (path[0] === 'ui') {
        path.shift();
    }
    return 'template:/' + rootName + '/' + path.join('/');
}
export default GlimmerTemplatePrecompiler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xpbW1lci10ZW1wbGF0ZS1wcmVjb21waWxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9icm9jY29saS9nbGltbWVyLXRlbXBsYXRlLXByZWNvbXBpbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sTUFBTSxNQUFNLDRCQUE0QixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQU8vQyxnQ0FBaUMsU0FBUSxNQUFNO0lBSzdDLFlBQVksU0FBUyxFQUFFLE9BQU87UUFDNUIsS0FBSyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUE7UUFMckIsZUFBVSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckIsb0JBQWUsR0FBRyxJQUFJLENBQUM7UUFLckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxhQUFhLENBQUMsT0FBTyxFQUFFLFlBQVk7UUFDakMsSUFBSSxTQUFTLEdBQUcsb0JBQW9CLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDMUUsTUFBTSxDQUFDLGlCQUFpQixHQUFHLFVBQVUsQ0FBZSxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUN2SCxDQUFDO0NBQ0Y7QUFFRCw4QkFBOEIsUUFBUSxFQUFFLFlBQVk7SUFDbEQsSUFBSSxJQUFJLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFMUIscURBQXFEO0lBQ3JELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2IsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNmLENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWSxHQUFHLFFBQVEsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQsZUFBZSwwQkFBMEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBGaWx0ZXIgZnJvbSAnYnJvY2NvbGktcGVyc2lzdGVudC1maWx0ZXInO1xuaW1wb3J0IHsgcHJlY29tcGlsZSB9IGZyb20gJ0BnbGltbWVyL2NvbXBpbGVyJztcblxuaW50ZXJmYWNlIFRlbXBsYXRlTWV0YSB7XG4gICc8dGVtcGxhdGUtbWV0YT4nOiB0cnVlO1xuICBzcGVjaWZpZXI6IHN0cmluZztcbn1cblxuY2xhc3MgR2xpbW1lclRlbXBsYXRlUHJlY29tcGlsZXIgZXh0ZW5kcyBGaWx0ZXIge1xuICBleHRlbnNpb25zID0gWydoYnMnXTtcbiAgdGFyZ2V0RXh0ZW5zaW9uID0gJ2pzJztcbiAgb3B0aW9uczogYW55O1xuXG4gIGNvbnN0cnVjdG9yKGlucHV0Tm9kZSwgb3B0aW9ucykge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB9XG5cbiAgcHJvY2Vzc1N0cmluZyhjb250ZW50LCByZWxhdGl2ZVBhdGgpIHtcbiAgICBsZXQgc3BlY2lmaWVyID0gZ2V0VGVtcGxhdGVTcGVjaWZpZXIodGhpcy5vcHRpb25zLnJvb3ROYW1lLCByZWxhdGl2ZVBhdGgpO1xuICAgIHJldHVybiAnZXhwb3J0IGRlZmF1bHQgJyArIHByZWNvbXBpbGU8VGVtcGxhdGVNZXRhPihjb250ZW50LCB7IG1ldGE6IHsgc3BlY2lmaWVyLCAnPHRlbXBsYXRlLW1ldGE+JzogdHJ1ZSB9IH0pICsgJzsnO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRlbXBsYXRlU3BlY2lmaWVyKHJvb3ROYW1lLCByZWxhdGl2ZVBhdGgpIHtcbiAgbGV0IHBhdGggPSByZWxhdGl2ZVBhdGguc3BsaXQoJy8nKTtcbiAgbGV0IHByZWZpeCA9IHBhdGguc2hpZnQoKTtcblxuICAvLyBUT0RPIC0gc2hvdWxkIHVzZSBtb2R1bGUgbWFwIGNvbmZpZyB0byBiZSByaWdvcm91c1xuICBpZiAocGF0aFtwYXRoLmxlbmd0aCAtIDFdID09PSAndGVtcGxhdGUuaGJzJykge1xuICAgIHBhdGgucG9wKCk7XG4gIH1cbiAgaWYgKHBhdGhbMF0gPT09ICd1aScpIHtcbiAgICBwYXRoLnNoaWZ0KCk7XG4gIH1cblxuICByZXR1cm4gJ3RlbXBsYXRlOi8nICsgcm9vdE5hbWUgKyAnLycgKyBwYXRoLmpvaW4oJy8nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgR2xpbW1lclRlbXBsYXRlUHJlY29tcGlsZXI7XG4iXX0=